import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import Navbar from 'react-bootstrap/Navbar';
import Form from 'react-bootstrap/Form';
import Button from 'react-bootstrap/Button';
import Container from 'react-bootstrap/Container';
import { useRef, useEffect, useState } from 'react';
import axios from 'axios';
import { useRouter } from 'next/router';
import { useCookies } from 'react-cookie';
import Nav from 'react-bootstrap/Nav';
import { backend_link } from "@/utils/backend";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const storage_units = useRef();
  const load_forecast = useRef();
  const profit_pref = useRef();
  const [count, setCount] = useState(0);
  const [solarUnits, setsolarUnits] = useState(0);
  const [storageUnits, setstorageUnits] = useState(0);
  const [loadForecast, setloadForecast] = useState(0);
  const [profitPref, setprofitPref] = useState(0);
  const [type, setType] = useState('Not entered');
  const [username, setUsername] = useState('');

  const router = useRouter();
  const [cookies, setCookie] = useCookies(['username']);

  useEffect(() => {
    if (cookies.username === '') {
      router.push("/login");
    }

    setUsername(cookies.username);

    axios.get(backend_link + "/energy/x").then((res) => {
      setsolarUnits(res.data.solarUnits);
      setstorageUnits(res.data.storageUnits);
      setloadForecast(res.data.loadForecast);
      setprofitPref(res.data.profitPref * 100);
      setCount(res.data.profitPref);
      setType(res.data.type);
    }).catch((err) => {
      console.log(err);
    })

    console.log(storageUnits);
  }, [])

  const submit = (e) => {
    e.preventDefault();

    axios.post(backend_link + '/energy/x', {
            storageUnits: storage_units.current.value,
            loadForecast: load_forecast.current.value,
            profitPref: profit_pref.current.value / 100
            }).then((res) => {
                alert("Posted");
            }).catch((err) => {
                alert(err);
        })
  }

  const logout = () => {
    axios.post(backend_link + '/auth/logout', {
    }).then((res) => {
        alert("Logged out");
        setCookie('username', '');
        router.push("/login");
    }).catch((err) => {
        alert(err);
    });
  }

  return (
    <div suppressHydrationWarning={true}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar expand="lg" className="bg-body-tertiary" bg="dark" data-bs-theme="dark">
      <Container fluid>
        <Navbar.Brand href="#">Peer to Peer Energy Trading</Navbar.Brand>
        <Navbar.Toggle aria-controls="navbarScroll" />
        <Navbar.Collapse id="navbarScroll">
          <Nav
            className="me-auto my-2 my-lg-1"
            style={{ maxHeight: '100px' }}
            navbarScroll
          >
          </Nav>
          <Form className="d-flex">
            <Navbar.Text className="me-3" id={styles.username}>Hello! {username}</Navbar.Text>
            <Button variant="success" onClick={logout}>Logout</Button>
            
          </Form>
        </Navbar.Collapse>
      </Container>
    </Navbar>
      <main className={`${styles.main} ${inter.className}`}>
        <form id={styles.form} onSubmit={submit}>
        <div id={styles.tb}>
            <b id={styles.formquery}>Solar Units: </b><p>{solarUnits}</p>
            <b id={styles.formquery}>Storage Units</b>
            <input type="text" id={styles.energy_units} placeholder="Energy in units" ref={storage_units} value={storageUnits} onChange={(e) => {setstorageUnits(e.target.value)}} /><br />
            <b id={styles.formquery}>Load Forecast</b>
            <input type="text" id={styles.energy_forecast} placeholder="Energy in units" ref={load_forecast} value={loadForecast} onChange={(e) => {setloadForecast(e.target.value)}} /><br />
            <b id={styles.formquery}>Profit Preference [{count}]</b>
            <input type="range" min="0" max="100" id={styles.profit_pref} ref={profit_pref} onChange={() => {setCount(profit_pref.current.value / 100)}} defaultValue={profit_pref} /><br />
            <p id={styles.formquery}>Profile: {type}</p>
        </div>

        <button type="submit" id={styles.submitbtn} className="btn btn-primary">Submit</button>
        </form>
      </main>
    </div>
  );
}
